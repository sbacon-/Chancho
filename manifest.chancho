---misc/AlertScript
<section class="full">
<h3> Automatic Alert Script </h3>
<p> I wrote this script to assist with my job at work. <br>
The original goal was to create a tool that presses the refresh button (on the page) automatically<br>
The program has been extended play a sound anytime there is a specific event in a webpage<br>
I've also made some adjustments to choose the sound and refresh rates through a menu on the webpage<br>
<br>
The functionality has been improved slightly, however there are still some issues:<br>
<ul><li>There are two different views and the sound script will only work on one of them</li>
<li>If the page loses focus for too long, the webpage will freeze and need to be closed</li>
<li>I'm unable to get the script to run without pasting the deployment script into the browser console</li></ul>
<h4> Deployment Code: </h4>
<code>
var e = document.createElement("SCRIPT");
e.setAttribute("type","text/javascript");
e.setAttribute("scr","https://chancho.dev/res/scripts/alertScript.js");
document.body.appendChild(e);
</code>

<h4> alertScript.js </h4>

<code>
var intervalID;
var angel = false;
var delta = 10000;

var addr = "http://chancho.dev/res/mp3/";
var sound_url = "";
var sounds = ["","DeskBell","VineBoom","Spam"];
var soundIndex = 0;

var ul,li,h3,subUL,subLI,subLII,subLIII,subLIV;
var subLI_label, subLII_label, subLIII_label, subLIV_label;


function autorefresh(){
	//Check for the existense of a refresh button
   var home = $('button[data-id="incident|NoRelationship|HomePageGrid|Mscrm.HomepageGrid.incident.RefreshModernButton"]'); 
   var home_alt = $('button[data-id="RefreshDashboard"]');
   if(home.length > 0)home[0].click();
   if(home_alt.length > 0)home_alt[0].click();

	
   //Check for Cases assigned to 'Accoutning Core'
   var acCase = $('a[aria-label="Accounting Core"]');
   if(!angel && acCase.size()>0){
      playSound();
      angel = true;   
      subLI_label.innerHTML = "Notify: OFF";//Stop notifying until reactivated
   }
}

function playSound(){
   window.open(sound_url,"_blank","height=200,width=200");
}

function changeSound(){
   soundIndex++;
   if(soundIndex>=sounds.length)soundIndex=0;
   switch(soundIndex){
      case 0:
         subLII_label.innerHTML = "Alarm: NONE";
         sound_url = "";
         return;
      case 1:
         subLII_label.innerHTML = "Alarm: Bell";
         break;
      case 2:
         subLII_label.innerHTML = "Alarm: Vine";
         break;
      case 3:
         subLII_label.innerHTML = "Alarm: Spam";
         break;
   }
   sound_url = addr + sounds[soundIndex] + ".mp3";
}

function repeater(){
   if(intervalID == null){
      intervalID = setInterval(autorefresh,delta);	
      subLIII_label.innerHTML = "REFRESH: On";
   }else{
      clearInterval(intervalID);
      intervalID = null;
      subLIII_label.innerHTML = "REFRESH: Off";
   }
}

function changeDelay(){
   delta *= 2;
   if(delta>=50000) delta = 5000;
   subLIV_label.innerHTML = "DELAY: " + (delta/1000) + "s";

   repeater();
   repeater();
}

function resetNotify(){
   if(angel){
      angel=false;
      subLI_label.innerHTML = "Notify: ON";
   }else{
      angel=true;
      subLI_label.innerHTML = "Notify: OFF";
   }
}

function createAngelGUI(){
   ul = document.getElementById("id-5");
   var lastLI = ul.lastElementChild
   lastLI.setAttribute("class","pa-cr pa-gv pa-fd");

   li = document.createElement("LI");
   h3 = document.createElement("H3");
   subUL = document.createElement("UL");
   subLI = document.createElement("LI");
   subLII = document.createElement("LI");
   subLIII = document.createElement("LI");
   subLIV = document.createElement("LI");

   li.setAttribute("class","pa-cr");

   h3.setAttribute("class","pa-dx pa-bg pa-a pa-dy pa-dz pa-bl pa-ea pa-eb pa-ec pa-o pa-y pa-cm pa-ed ");
   h3.innerHTML = "Static M3sh";

   var fullLI = [subLI,subLII,subLIII,subLIV];
   for (var i = 0; i<fullLI.length; i++){
      var divI = document.createElement("DIV");
      divI.setAttribute("class","pa-a pa-am pa-bk pa-bl pa-bg pa-w pa-bm pa-bn pa-bo pa-bp pa-bq pa-fl pa-fm flexbox");
      divI.setAttribute("role","presentation");
      var divII = document.createElement("DIV");
      divII.setAttribute("class","pa-a pa-br pa-bs pa-w pa-f pa-o pa-bc pa-bt flexbox");
      divII.setAttribute("role","presentation");
      var divIII = document.createElement("DIV");
      divIII.setAttribute("class","pa-bu pa-bv pa-bw pa-bx pa-by pa-bz pa-ca pa-cb pa-cc pa-cd ");
      divIII.setAttribute("role","presentation");
      var divIV = document.createElement("DIV");
      divIV.setAttribute("class","pa-bd pa-e pa-o pa-ce flexbox");
      divIV.setAttribute("role","presentation");
      var spanI = document.createElement("SPAN");
      spanI.setAttribute("class","pa-cf pa-cg pa-ch pa-ci pa-ba pa-a pa-o pa-ax pa-fn pa-fo svgIcon ");
      var img = document.createElement("IMG");
      img.setAttribute("class","pa-cf pa-cj pa-ck ");
      var spanII = document.createElement("SPAN");
      spanII.setAttribute("class","pa-bu pa-o pa-cl pa-cm pa-cn pa-co pa-cp pa-bc pa-cq ");
      spanII.setAttribute("id","chancho-"+i);
      spanII.innerHTML = "TEMP";

      spanI.appendChild(img);
      divIV.appendChild(spanI);
      divIV.appendChild(spanII);
      divII.appendChild(divIII);
      divII.appendChild(divIV);
      divI.appendChild(divII);
      fullLI[i].appendChild(divI);
      fullLI[i].setAttribute("class","pa-am pa-a pa-o pa-ao pa-bg pa-ap pa-b pa-bh pa-bi pa-bj ");
   }

   subUL.appendChild(subLI);
   subUL.appendChild(subLII);
   subUL.appendChild(subLIII);
   subUL.appendChild(subLIV);

   li.appendChild(h3);
   li.appendChild(subUL);

   ul.appendChild(li);
}

function buttonFunctions(){
   
   subLI.setAttribute("onClick","resetNotify()");
   subLI_label=document.getElementById("chancho-0");
   subLI_label.innerHTML = "Notify: ON";

   subLII.setAttribute("onClick","changeSound()");
   subLII_label = document.getElementById("chancho-1");
   subLII_label.innerHTML = "Alarm: NONE";
   
   subLIII.setAttribute("onClick","repeater()");
   subLIII_label = document.getElementById("chancho-2");
   subLIII_label.innerHTML = "REFRESH: ON";
   
   subLIV.setAttribute("onClick","changeDelay()");
   subLIV_label = document.getElementById("chancho-3");
   subLIV_label.innerHTML = "DELAY: "+delta/1000+"s";
}

createAngelGUI();
buttonFunctions();
repeater();
</code>
</p>
</section>








---godot/template
<section class="feature">
<canvas id="canvas"></canvas>
<script src=$GODOT_URL></script>
<button id="play" onclick="engine.startGame({onProgress: printProgress })"><i class="fas fa-play"></i></button>
<script>

var engine = new Engine($GODOT_CONFIG);
var playButton = document.querySelector("#play");     
var canvas = document.querySelector("#canvas");     
canvas.setAttribute("style","display:none");
function printProgress(current, total) {
var percentage = (current/total)*100;
playButton.setAttribute("style","background:linear-gradient(45deg,var(--primary-dsat) 0%,var(--primary)"+percentage+"%, var(--complementary) "+percentage+"%,var(--complementary) 100%)"); 
console.log("Loaded " + current + " of " + total + " bytes");
if(total==current){
  playButton.setAttribute("style","display:none");
  canvas.setAttribute("style","display:none");
}
}
</script>
</section>
<section class="text">
<h3>$GODOT_PROJECT_NAME</h3>
<p>
TODO: PROJECT WRITE-UP
</p>
</section>







---godot/gdChess/index
<section class="feature">
<canvas id="canvas"></canvas>
<script src=index.js></script>
<button id="play" onclick="engine.startGame({onProgress: printProgress })"><i class="fas fa-play"></i></button>
<script>

var engine = new Engine({"args":[],"canvasResizePolicy":1,"executable":"index","experimentalVK":false,"fileSizes":{"index.pck":39696,"index.wasm":13351459},"focusCanvas":true,"gdnativeLibs":[]});
var playButton = document.querySelector("#play");     
var canvas = document.querySelector("#canvas");
canvas.setAttribute("style","display:none");     
function printProgress(current, total) {
var percentage = (current/total)*100;
playButton.setAttribute("style","background:linear-gradient(45deg,var(--primary-dsat) 0%,var(--primary)"+percentage+"%, var(--complementary) "+percentage+"%,var(--complementary) 100%)"); 
console.log("Loaded " + current + " of " + total + " bytes");
if(current==total){
 playButton.setAttribute("style","display:none")
 canvas.setAttribute("style","");     
}
}

</script>
</section>
<section class="text">
<h3>Chess</h3>
<p>
TODO: PROJECT WRITE-UP
</p>
</section>








---cSharp/AlgoVisualizer/index
<section class="feature">
<!--GAME TITLE-->
    <div class="center">
    <div id="unity-container" class="unity-desktop">
      <canvas id="unity-canvas"></canvas>
      <div id="unity-loading-bar">
        <div id="unity-logo"></div>
        <div id="unity-progress-bar-empty">
          <div id="unity-progress-bar-full"></div>
        </div>
      </div>
      <div id="unity-footer">
        <div id="unity-webgl-logo"></div>
        <div id="unity-fullscreen-button"></div>
        <div id="unity-build-title"></div>
      </div>
    </div>
  </div><br>
</section>
<section class="text">
  <!--GAME TEXT-->
  <h3>Sort Algorithms</h3><br>
  <p>
<u>Bubble Sort</u> - <strong>O(n<sup>2</sup>)</strong> Comparisons, <strong>O(n<sup>2</sup>)</strong> Swaps <br> 
The least efficient of the sort methods will simply compare the first node with it's neighbor.
Swapping if it is greater than it's neighboring node. This process is repeated until it reaches the last unsorted node. 
When the last unsorted node is at index 0, the node is ,in fact, sorted by omission.
This sort algorithm can be useful when the array is quite small, as the code is simple, however becomes very slow as <em> n </em> increases.
<br><br>
<u>Selection Sort</u> - <strong>O(n<sup>2</sup>)</strong> Comparisons, <strong>O(n)</strong> Swaps <br> 
Is a marginally more efficient algorithm, starting at the first unsorted node, the script will loop through and determine
the minimum node and move it to the start of the array. It is considered more efficent than the bubble sort as the
node is only swapped once the end of the array is reached. It is similar to bubble sort in that the code is very simple, but ineffective
when working with larger sets of data.
<br><br>
<u>Insertion Sort</u> - <strong>O(n<sup>2</sup>)</strong> Comparisons, <strong>O(n<sup>2</sup>)</strong> Swaps <br>
Though the average efficiency is comperable to the previous two sort algorithms, the insertion sort tends to sort slightly
faster. Starting at the first unsorted element it will work backwards until it finds a node that has a higher value. This can reduce
comparisons in a best case scenario where the unsorted node is higher than the next node. Another useful property of the 
insertion sort algorithm is that unsorted elements can be continually added. This is useful in the case of a high-score board, where it would be 
inefficient to sort the entire list to add a single entry.
<br><br>
<u>Merge Sort</u> - <strong>Θ(n log n)</strong> Comparisons, <strong>O(n)</strong> Auxiliary Array<br>
Rather than performing any swaps, a much more effective method of sorting is to use a Merge Sort. This algorithms breaks each 
node into it's own "sorted array" of size 1. Comparing each array with the first element of its neighboring array, it pulls
the lowest node (and moves to the next node if the array size is greater than one) then pulls the remaining nodes least to greatest to a new array. 
This new sorted array is twice the length of the previous array. Repeating this process until the sorted array is of size <em>n</em>. In my opinion this may
not be the most elegant solution as it requires an auxillary array to hold the nodes as they are being sorted.
<br><br>
<u>Quick Sort</u> - <strong>O(n log n)</strong> <br>
Is probably the most effective sort covered in this study. The way this one works is to choose a node from the array at random.
(Ideally close to the median value) This value become the "pivot". The array is split into two new partitions on each side of the pivot. 
The partition on the left side of the pivot is iterated until a vaule is found that is greater than or equal to the pivot. Then the right 
side partition is iterated until a value is found that is less than or equal to the pivot. Once each side has found a value, the nodes are swapped.
Continuing this process will put all nodes less than the pivot on the left side partition, and the nodes larger than the pivot on the right side.
This ensures that the pivot is in the correct place of the array. A pivot is chosen in the left and right partions and new sub-partitions are created.
The divide and conquer type of sorting seems to be the quickest method.
<br><br>
<u>Heap Sort</u> - <strong>O(n log n)</strong> <br>
I found this algorithm to be the most fascinating in it's approach to the task of sorting. The way a heap sort works is to 
first organize the nodes into a tree data structure called a heap. The structure of the heap is such that each parent node 
is parent to two children nodes that are smaller than the parent, these child nodes follow the same structure until the entire array is "heapified".
The heap is stored in an array as follows <br>[0,1,2,3,4,5] - 0 is a parent of 1 and 2, 1 is a parent of 3 and 4, and 2 is a parent of 5.<br>
The formula for finding relationships to current node at index <em>i</em> is:<br>
<code>
iParent(i)=floor((i-1)/2);<br>
iLeftChild(i)=2i+1;<br>
iRightChild(i)=2i+2;<br>
</code>
Once the the array is heapified, it is simply a matter of pulling the top most node and swapping with the last element in the heap.
Once the smallest node is at the top, you swap with the larger of it's two children until the heap data structure is satisfied (being that the children of the node
smaller than the parent node). You then continue pulling the top node until the list is beautifully sorted.
<br><br>
Source code is provided below, it isn't incredibly effecient as is as it is used for the visualizer seen above. But I plan to add 
an implementable version of the sort methods. Eventually.<br>
SOURCE: <a href="https://github.com/sbacon-/SortAlgorithms"> /sbacon-/SortAlgorithms </a>
</p>
<script>
      var buildUrl = "Build";
      var loaderUrl = buildUrl + "/AlgoVisualizer.loader.js";
      var config = {
        dataUrl: buildUrl + "/AlgoVisualizer.data",
        frameworkUrl: buildUrl + "/AlgoVisualizer.framework.js",
        codeUrl: buildUrl + "/AlgoVisualizer.wasm",
        streamingAssetsUrl: "StreamingAssets",
        companyName: "chancho.dev",
        productName: "Sort Algorithm Visualizer",
        productVersion: "1.0",
      };

      var container = document.querySelector("#unity-container");
      var canvas = document.querySelector("#unity-canvas");
      var loadingBar = document.querySelector("#unity-loading-bar");
      var progressBarFull = document.querySelector("#unity-progress-bar-full");
      var fullscreenButton = document.querySelector("#unity-fullscreen-button");
      var mobileWarning = document.querySelector("#unity-mobile-warning");

      if (/iPhone|iPad|iPod|Android/i.test(navigator.userAgent)) {
        container.className = "unity-mobile";
        config.devicePixelRatio = 1;
        mobileWarning.style.display = "block";
        setTimeout(() => {
          mobileWarning.style.display = "none";
        }, 5000);
      } else {
        canvas.style.width = "100%";
        canvas.style.height = "85%";
      }
      loadingBar.style.display = "block";

      var script = document.createElement("script");
      script.src = loaderUrl;
      script.onload = () => {
        createUnityInstance(canvas, config, (progress) => {
          progressBarFull.style.width = 100 * progress + "%";
        }).then((unityInstance) => {
          loadingBar.style.display = "none";
          fullscreenButton.onclick = () => {
            unityInstance.SetFullscreen(1);
          };
        }).catch((message) => {
          alert(message);
        });
      };
      document.body.appendChild(script);
    </script>  
</section>









---cSharp/LD49/index
<section class="feature">
  <div class="center">
    <div id="unity-container" class="unity-desktop">
      <canvas id="unity-canvas"></canvas>
      <div id="unity-loading-bar">
        <div id="unity-logo"></div>
        <div id="unity-progress-bar-empty">
          <div id="unity-progress-bar-full"></div>
        </div>
      </div>
      <div id="unity-mobile-warning"></div>
      <div id="unity-footer">
        <div id="unity-webgl-logo"></div>
        <div id="unity-fullscreen-button"></div>
        <div id="unity-build-title"></div>
      </div>
    </div>
  </div>
</section>
<section class="text">
  <h2>Un-Named Stock Market Battle Simulator</h2>
  
  <h4>Created in 48 hours for Ludum Dare #49</h4><br>
  <h3>Lesson's Learned</h3>
  <p>
  This project didn't turn out exactly like I'd hoped.<br>
  Not sure, but I think I had too many plans for mechanics to implement. After the first 12 hours of the Compo,
  I was already exhausted from trying to pull a coffee fueled 24 hour run. Ofcourse to the the detriment of the next few days. The scope was way beyond
  what I could realistically accomplish.<br>
  </p>
  <br><h4>Here are the ideas I would have ignored if another theme was selected</h4><br>
  <a href = "/res/img/ld49prep.png"><img src="/res/img/ld49prep.png" alt="16x2 first impressions, scribbled out in gimp"></a>
  <p>
  The main issue I think is the game just isn't fun, (I'd opt out of that category on voting if I could lol). I couldn't really implement
  any incentive to trade other than to see the numbers go up. If that works it works, but with as little polish as I could put together in the time
  I don't think it does. I wanted to implement some sort of system to upgrade the hardware and enviroment, but I guess I couldn't be bothered.
  </p>
  <br><h4>On a more positive note...</h4><br>
  <p>
  I knew going into the compo that I wanted to implement a renderTexture of some sort. As a filter to the entire game or in the case of this game:
  as a second UI projected onto a computer screen. The vectors on the graph were a bit tricky, they kept disappearing when I was down scaling the texture
  to give it a more blocky look on the monitor, but one of my absolute favorite parts of development is the UI (as you can maybe tell from the game above that is about 90% UI),
  so I had a great time with it.
  </p><br>
  <h5>I hope you enjoyed, I'll see you all in April.</h5>
  <script>
      var buildUrl = "Build";
      var loaderUrl = buildUrl + "/LD49.loader.js";
      var config = {
        dataUrl: buildUrl + "/LD49.data",
        frameworkUrl: buildUrl + "/LD49.framework.js",
        codeUrl: buildUrl + "/LD49.wasm",
        streamingAssetsUrl: "StreamingAssets",
        companyName: "chancho",
        productName: "LD49",
        productVersion: "0.049",
      };

      var container = document.querySelector("#unity-container");
      var canvas = document.querySelector("#unity-canvas");
      var loadingBar = document.querySelector("#unity-loading-bar");
      var progressBarFull = document.querySelector("#unity-progress-bar-full");
      var fullscreenButton = document.querySelector("#unity-fullscreen-button");
      var mobileWarning = document.querySelector("#unity-mobile-warning");

      if (/iPhone|iPad|iPod|Android/i.test(navigator.userAgent)) {
        container.className = "unity-mobile";
        config.devicePixelRatio = 1;
        mobileWarning.style.display = "block";
        setTimeout(() => {
          mobileWarning.style.display = "none";
        }, 5000);
      } else {
        canvas.style.width = "100%";
        canvas.style.height = "85%";
      }
      loadingBar.style.display = "block";

      var script = document.createElement("script");
      script.src = loaderUrl;
      script.onload = () => {
        createUnityInstance(canvas, config, (progress) => {
          progressBarFull.style.width = 100 * progress + "%";
        }).then((unityInstance) => {
          loadingBar.style.display = "none";
          fullscreenButton.onclick = () => {
            unityInstance.SetFullscreen(1);
          };
        }).catch((message) => {
          alert(message);
        });
      };
      document.body.appendChild(script);
    </script>
</section>









---cSharp/Wordle/index
<section class="feature">
  <div class="center">
    <div id="unity-container" class="unity-desktop">
      <canvas id="unity-canvas"></canvas>
      <div id="unity-loading-bar">
        <div id="unity-logo"></div>
        <div id="unity-progress-bar-empty">
          <div id="unity-progress-bar-full"></div>
        </div>
      </div>
      <div id="unity-mobile-warning"></div>
      <div id="unity-footer">
        <div id="unity-webgl-logo"></div>
        <div id="unity-fullscreen-button"></div>
        <div id="unity-build-title"></div>
      </div>
    </div>
  </div>
</section>
<section class="text">
  <h2>Wordle</h2>
  <p>
  <h4>Created in 48 hours in preparation for Ludum Dare #50</h4>
  Recently started playing <a href=https://www.nytimes.com/games/wordle/index.html>Wordle</a><br>
  Frustrated with only being able to play one round per day, I decided to create my own version.<br>
  The functionality is a limited, but similar enough for a small project<br>
  Special thanks to <a href=https://gist.github.com/scholtes>Garrett Sholtes</a> for posting the World Dictionary to GitHub<br>
  </p>
    <script>
      var buildUrl = "Build";
      var loaderUrl = buildUrl + "/Wordle.loader.js";
      var config = {
        dataUrl: buildUrl + "/Wordle.data",
        frameworkUrl: buildUrl + "/Wordle.framework.js",
        codeUrl: buildUrl + "/Wordle.wasm",
        streamingAssetsUrl: "StreamingAssets",
        companyName: "chancho",
        productName: "Wordle",
        productVersion: "0.049",
      };

      var container = document.querySelector("#unity-container");
      var canvas = document.querySelector("#unity-canvas");
      var loadingBar = document.querySelector("#unity-loading-bar");
      var progressBarFull = document.querySelector("#unity-progress-bar-full");
      var fullscreenButton = document.querySelector("#unity-fullscreen-button");
      var mobileWarning = document.querySelector("#unity-mobile-warning");

      if (/iPhone|iPad|iPod|Android/i.test(navigator.userAgent)) {
        container.className = "unity-mobile";
        config.devicePixelRatio = 1;
        mobileWarning.style.display = "block";
        setTimeout(() => {
          mobileWarning.style.display = "none";
        }, 5000);
      } else {
        canvas.style.width = "100%";
        canvas.style.height = "85%";
      }
      loadingBar.style.display = "block";

      var script = document.createElement("script");
      script.src = loaderUrl;
      script.onload = () => {
        createUnityInstance(canvas, config, (progress) => {
          progressBarFull.style.width = 100 * progress + "%";
        }).then((unityInstance) => {
          loadingBar.style.display = "none";
          fullscreenButton.onclick = () => {
            unityInstance.SetFullscreen(1);
          };
        }).catch((message) => {
          alert(message);
        });
      };
      document.body.appendChild(script);
    </script>
</section>









---cSharp/Ressetti/index
<section class="feature">
  <div class="center">
    <div id="unity-container" class="unity-desktop">
      <canvas id="unity-canvas"></canvas>
      <div id="unity-loading-bar">
        <div id="unity-logo"></div>
        <div id="unity-progress-bar-empty">
          <div id="unity-progress-bar-full"></div>
        </div>
      </div>
      <div id="unity-mobile-warning"></div>
      <div id="unity-footer">
        <div id="unity-webgl-logo"></div>
        <div id="unity-fullscreen-button"></div>
        <div id="unity-build-title"></div>
      </div>
    </div>
  </div>
</section>
<section class="text">
  <h2>Ressetti's Game</h2>
  <p>
  <h4>Text Recieved w/ Concept : 1:17AM;</h4>
  <h4>Text Read : 1:44AM;</h4>
  <h4>Publish Time : 2:05AM;</h4>
  </p>
    <script>
      var buildUrl = "Build";
      var loaderUrl = buildUrl + "/Ressetti.loader.js";
      var config = {
        dataUrl: buildUrl + "/Ressetti.data",
        frameworkUrl: buildUrl + "/Ressetti.framework.js",
        codeUrl: buildUrl + "/Ressetti.wasm",
        streamingAssetsUrl: "StreamingAssets",
        companyName: "chancho",
        productName: "Ressetti",
        productVersion: "0.049",
      };

      var container = document.querySelector("#unity-container");
      var canvas = document.querySelector("#unity-canvas");
      var loadingBar = document.querySelector("#unity-loading-bar");
      var progressBarFull = document.querySelector("#unity-progress-bar-full");
      var fullscreenButton = document.querySelector("#unity-fullscreen-button");
      var mobileWarning = document.querySelector("#unity-mobile-warning");

      if (/iPhone|iPad|iPod|Android/i.test(navigator.userAgent)) {
        container.className = "unity-mobile";
        config.devicePixelRatio = 1;
        mobileWarning.style.display = "block";
        setTimeout(() => {
          mobileWarning.style.display = "none";
        }, 5000);
      } else {
        canvas.style.width = "100%";
        canvas.style.height = "85%";
      }
      loadingBar.style.display = "block";

      var script = document.createElement("script");
      script.src = loaderUrl;
      script.onload = () => {
        createUnityInstance(canvas, config, (progress) => {
          progressBarFull.style.width = 100 * progress + "%";
        }).then((unityInstance) => {
          loadingBar.style.display = "none";
          fullscreenButton.onclick = () => {
            unityInstance.SetFullscreen(1);
          };
        }).catch((message) => {
          alert(message);
        });
      };
      document.body.appendChild(script);
    </script>
</section>









---cSharp/SHMUP/index
<section class="feature">
 <!-- Legacy Unity Instance -->
  <script src="Build/UnityProgress.js"></script>
  <script src="Build/UnityLoader.js"></script>
  <script> var unityInstance = UnityLoader.instantiate("unityContainer", "Build/SHMUP.json", {onProgress: UnityProgress});</script>

      <div class="center">
      <div class="webgl-content">
        <div id="unityContainer" style="width: 100%; height: 85%"></div>
        <div class="footer">
          <div class="webgl-logo"></div>
          <div class="unity-fullscreen-button" onclick="unityInstance.SetFullscreen(1)"></div>
          <div class="title">Shoot 'Em Up Prototype</div>
        </div>
      </div>
      </div>
</section>
<section class="text">
      <h2>SHMUP</h2>
      <p>
        Had a great weekend making this, wanted to complete a project on a LD Jam Timeline in the Unity Engine, this is about 2 days or work.
        Very happy with the results, collision is terrible and I had meant to implement some sort of boost system, but I decided to focus more on
        visuals and overall feel of the game.<br>
        <a href="https://github.com/sbacon-/MazeAlgorithmScripts/blob/master/Depth%20First%20Search.cs">View Source Code</a>
      </p>
</section>









---About
<section class="full">
<h2>About Me</h2>
<p>
Hello, my name is Tom. I make games, automation utilities, and websites.<br><br>
<img style="width:30%;" src="/res/img/me.jpg" alt="Handsome man in glasses shaped like hearts"><br>
I taught myself to write Java programs 10+ years ago, and have loved it ever since.<br>
I recently picked up C++; I'm very excited to start making games/applications
with such a flexible and functional language.<br><br>
A few years ago, after some guidance from the Ludum Dare community, I decided to learn C# and the Unity Engine.
I've participated in every compo since 45, and the results seem to improve with every entry.
I am familiar with a few other languages (Python, Kotlin, Python, JS, HTML/CSS, XML,and Visual Basic),
but these I don't use so often.<br><br>
I am available for freelance programming if you have something you would like built: 
websites, games, apps etc. Check out the footer for contact info, 
and check out the my Github page for tools/inspiration in automating your own projects.
</p>
</section>









---cSharp/LD47/index
<section class="feature">
<!-- Legacy Unity Instance -->
      <script src="Build/UnityProgress.js"></script>
      <script src="Build/UnityLoader.js"></script>
      <script> var unityInstance = UnityLoader.instantiate("unityContainer", "Build/LD47.json", {onProgress: UnityProgress});</script>    
      <div class="center">
      <div class="webgl-content">
        <div id="unityContainer" style="width: 100%; height: 85%"></div>
        <div class="footer">
          <div class="webgl-logo"></div>
          <div class="fullscreen" onclick="unityInstance.SetFullscreen(1)"></div>
          <div class="title">LD47</div>
        </div>
      </div>
      </div><br>
</section>
<section class="text">
      <h2>Lazy River Racing</h2>
      <h4>Downloads:</h4>
      <ul>
        <li><a href="/files/LD47.zip">LRR - Standalone (31mb)</a></li>
      </ul><br>
      <p>
          Game was created in 48 hours for the <a href="https://ldjam.com/events/ludum-dare/47/lazy-river-racing">Ludum Dare #47 Compo</a><br>
          Theme: "Stuck in a Loop"<br>
          All source code can be found here: <a href="https://github.com/sbacon-/LD47-LazyRiverRacing">source</a><br>
          ___<br>
          Had a very lazy weekend completing this <br>
          By far my most relaxed LD yet<br>
          Hope you enjoy <br>
          ___<br>
          Results<br>
          Overall: 535th (2.953 average from 34 ratings)<br>
          Fun: 374th (3.129 average from 33 ratings)<br>
          Innovation: 592nd (2.433 average from 32 ratings)<br>
          Theme: 482nd (3.145 average from 33 ratings)<br>
          Graphics: 444th (3.063 average from 34 ratings)<br>
          Audio: 327th (2.984 average from 33 ratings)<br>
          Humor: 113th (3.333 average from 32 ratings)<br>
          Mood: 374th (3.017 average from 32 ratings)<br>
      </p>
</section>









---cSharp/DolphinJump/index
<section class="feature">
  <h2>DolphinJump</h2>
  <div class="center">
    <div id="unity-container" class="unity-desktop">
      <canvas id="unity-canvas"></canvas>
      <div id="unity-loading-bar">
        <div id="unity-logo"></div>
        <div id="unity-progress-bar-empty">
          <div id="unity-progress-bar-full"></div>
        </div>
      </div>
      <div id="unity-mobile-warning"></div>
      <div id="unity-footer">
        <div id="unity-webgl-logo"></div>
        <div id="unity-fullscreen-button"></div>
        <div id="unity-build-title"></div>
      </div>
    </div>
  </div>
</section>
<section class="text">
  <p>

    Went and got a 3D printer this week so I made a game out of a model I made to print. T-minus 5 days to Ludum Dare 48!<br>
    <a href="/res/img/dolphindesign1.png"><img src="/res/img/dolphindesign1.png" alt="Dolphin Design Doc 1"></a><br>
    <a href="/res/img/dolphindesign2.png"><img src="/res/img/dolphindesign2.png" alt="Dolphin Design Doc 2"></a><br>
    
  </p>
    <script>
      var buildUrl = "Build";
      var loaderUrl = buildUrl + "/DolphinJump.loader.js";
      var config = {
        dataUrl: buildUrl + "/DolphinJump.data",
        frameworkUrl: buildUrl + "/DolphinJump.framework.js",
        codeUrl: buildUrl + "/DolphinJump.wasm",
        streamingAssetsUrl: "StreamingAssets",
        companyName: "chanchodev",
        productName: "DolphinJump",
        productVersion: "0.1",
      };

      var container = document.querySelector("#unity-container");
      var canvas = document.querySelector("#unity-canvas");
      var loadingBar = document.querySelector("#unity-loading-bar");
      var progressBarFull = document.querySelector("#unity-progress-bar-full");
      var fullscreenButton = document.querySelector("#unity-fullscreen-button");
      var mobileWarning = document.querySelector("#unity-mobile-warning");

      if (/iPhone|iPad|iPod|Android/i.test(navigator.userAgent)) {
        container.className = "unity-mobile";
        config.devicePixelRatio = 1;
        mobileWarning.style.display = "block";
        setTimeout(() => {
          mobileWarning.style.display = "none";
        }, 5000);
      } else {
        canvas.style.width = "100%";
        canvas.style.height = "85%";
      }
      loadingBar.style.display = "block";

      var script = document.createElement("script");
      script.src = loaderUrl;
      script.onload = () => {
        createUnityInstance(canvas, config, (progress) => {
          progressBarFull.style.width = 100 * progress + "%";
        }).then((unityInstance) => {
          loadingBar.style.display = "none";
          fullscreenButton.onclick = () => {
            unityInstance.SetFullscreen(1);
          };
        }).catch((message) => {
          alert(message);
        });
      };
      document.body.appendChild(script);
    </script>
</section>









---misc/ClickBot
<section class="full">
<h3>ClickBot</h3><br>
    <h4>Downloads:</h4>
    <ul>
      <li><a href="/res/files/ClickBot.jar">ClickBot.jar</a></li>
    </ul>
    <br>
    <p>        
        This is a simple utility to emulate the mouse as being pressed very rapidly (33 C/s)<br>
        <br>
        <strong>Update 12/11/19</strong><br>
        Updated for ease of use, the clicker will now ask for a number of clicks.
        The Clicker will run where the ok key is clicked. Or wherever the mouse is when the
        dialog is closed.<br>

        Enjoy!
    </p>
</section>









---cSharp/MazeGenerator/index
<section class="feature">
<!-- Legacy Unity Instance -->
  <script src="Build/UnityProgress.js"></script>
  <script src="Build/UnityLoader.js"></script>
  <script> var unityInstance = UnityLoader.instantiate("unityContainer", "Build/Unity Builds.json", {onProgress: UnityProgress});</script>

      <div class="center" style="width: 600px; height: 648px">
      <div class="webgl-content">
        <div id="unityContainer" style="width: 600px; height: 600px"></div>
        <small>R - Generate A New Maze</small>
      </div></div>

</section>
<section class="text">
      <h2>Algorithmic Maze Generation</h2>
      <p>
        This is a randomized variation of a depth first search algorithm, the basic structure is as follows:<br>
      </p>  <ul>
        <li>At each iteration the current node checks which neigbors are unexplored.</li><br>
          <ul><li>If all neighbors are explored, we will begin backtracking through the stack to the first cell with unexplored neighbors</li></ul><br>
        <li>Picking a neigbor at random it will remove the wall that separates them.</li><br>
        <li>The current node is added to the stack and the neighboring node will begin the next iteration</li><br></ul>
      <p>
        <a href="https://github.com/sbacon-/MazeAlgorithmScripts/blob/master/Depth%20First%20Search.cs">View Source Code</a>
      </p>
</section>









---cSharp/CUR2R5/index
<section class="feature">
    <div class="center">
    <div id="unity-container" class="unity-desktop">
      <canvas id="unity-canvas"></canvas>
      <div id="unity-loading-bar">
        <div id="unity-logo"></div>
        <div id="unity-progress-bar-empty">
          <div id="unity-progress-bar-full"></div>
        </div>
      </div>
      <div id="unity-mobile-warning"></div>
      <div id="unity-footer">
        <div id="unity-webgl-logo"></div>
        <div id="unity-fullscreen-button"></div>
        <div id="unity-build-title"></div>
      </div>
    </div>
  </div>
</section>
<section class="text">
  <p>
    <h2>Chancho's Unity Roundup 2k21 Remastered V</h2>
It's that time of year again. Time to gear up and be ready for the most intense 48 to 72 hours imaginable.
That's right folks, Ludum Dare.
I made this project as a refresher course. Had a ton of fun, especially with the UI. [MineSweeper].
Ran into a few bugs with the Canvas not corresponding to the screen size and trying to hard code transform positions.
It seems like Unity has also changed the way it handles exporting to Web.
Overall it was a good few weeks. Hope you enjoy the roundup and good luck on your own Jams.
  </p>
    <script>
      var buildUrl = "Build";
      var loaderUrl = buildUrl + "/CUR2R5.loader.js";
      var config = {
        dataUrl: buildUrl + "/CUR2R5.data",
        frameworkUrl: buildUrl + "/CUR2R5.framework.js",
        codeUrl: buildUrl + "/CUR2R5.wasm",
        streamingAssetsUrl: "StreamingAssets",
        companyName: "chancho.dev",
        productName: "CUR2R5",
        productVersion: "0.1",
      };

      var container = document.querySelector("#unity-container");
      var canvas = document.querySelector("#unity-canvas");
      var loadingBar = document.querySelector("#unity-loading-bar");
      var progressBarFull = document.querySelector("#unity-progress-bar-full");
      var fullscreenButton = document.querySelector("#unity-fullscreen-button");
      var mobileWarning = document.querySelector("#unity-mobile-warning");

      if (/iPhone|iPad|iPod|Android/i.test(navigator.userAgent)) {
        container.className = "unity-mobile";
        config.devicePixelRatio = 1;
        mobileWarning.style.display = "block";
        setTimeout(() => {
          mobileWarning.style.display = "none";
        }, 5000);
      } else {
        canvas.style.width = "100%";
        canvas.style.height = "85%";
      }
      loadingBar.style.display = "block";

      var script = document.createElement("script");
      script.src = loaderUrl;
      script.onload = () => {
        createUnityInstance(canvas, config, (progress) => {
          progressBarFull.style.width = 100 * progress + "%";
        }).then((unityInstance) => {
          loadingBar.style.display = "none";
          fullscreenButton.onclick = () => {
            unityInstance.SetFullscreen(1);
          };
        }).catch((message) => {
          alert(message);
        });
      };
      document.body.appendChild(script);
    </script>
</section>









---misc/LD46
<section class="full">
<h3>Ludum Dare 46 (IGKNIGHT)</h3><br>
    <h4>Downloads:</h4>
    <ul>
      <li><a href="/res/files/IgKnight.jar">IgKnight.jar (LD COMPO)</a></li>
      <li><a href="/res/files/Igknight.jar">Rolling Release</a></li>
    </ul><br>
    <p>
        
        Game was created in 48 hours for the <a href="https://ldjam.com/events/ludum-dare/46/igknight-keeper-of-flame">Ludum Dare #46 Compo</a><br>
        Theme: "Keep It Alive"<br>
        All source code can be found here: <a href="https://github.com/sbacon-/IGKNIGHTLD46">source</a><br>
        ___<br>
        Honestly did not think I would finish. 
        One hour before submitting I realized the audio 
        crashed the game on most systems.
        Had to gut most of it, but got it running;
        code was too disorganized to fix, but atleast
        <em>we learned something today!</em><br>

        ___<br>
        <strong>Screenshots:</strong><br>
        <img src="/res/img/46_48h_1.png">
        <img src="/res/img/46_48h_2.png">
        <img src="/res/img/46_48h_3.png"><br>


        <strong>Results:</strong><br>
        Overall: 412th (3.548 average from 44 ratings)<br>
        Fun: 352nd (3.5 average from 42 ratings)<br>
        Innovation: 794th (2.951 average from 43 ratings)<br>
        Theme: 254th (3.952 average from 44 ratings)<br>
        Graphics: 471st (3.523 average from 45 ratings)<br>
        Audio: 412th (3.216 average from 39 ratings)<br>
        Mood: 268th (3.538 average from 41 ratings)<br>
    </p>
</section>









---cSharp/Depths/index
<section class="feature">
  <div class="center">
    <div id="unity-container" class="unity-desktop">
      <canvas id="unity-canvas"></canvas>
      <div id="unity-loading-bar">
        <div id="unity-logo"></div>
        <div id="unity-progress-bar-empty">
          <div id="unity-progress-bar-full"></div>
        </div>
      </div>
      <div id="unity-mobile-warning"></div>
      <div id="unity-footer">
        <div id="unity-webgl-logo"></div>
        <div id="unity-fullscreen-button"></div>
        <div id="unity-build-title"></div>
      </div>
    </div>
  </div>
</section>
<section class="text">
  <h2>The Depths</h2>
  <h3><a href="/res/files/DepthsULTIMATEXII.zip">WINDOWS STANDALONE VERION</a></br></h3>
  <p>
    Made in 48 for LD48 - Thanks for taking the time to play, if you would be so kind as to leave a review it would be much appreciated.
    <a href="https://ldjam.com/events/ludum-dare/48/the-depths-ultimate-edition-xxi">LDJAM<em>.com</em></a>.<br>
    <br>
  </p>
    <h3>Lessons Learned:</h3>
    <ol>
      <li><strong>HOW NOT TO DO A CAMERA ON A 2.5D PLATFORMER</strong></li>
      <img src="/res/img/LD48 Progress 42hr.gif" alt="Sea Level, Shark Attack Gif"><br>
      I'll admit, during development I had gotten so used to seeing it in that perspective. Did not think anything was
      wrong with how I handled the camera. The bias of having made the levels and movement mechanics gave a sort of blindness
      to how bad it is. Upon release however, most of the criticisms are about how difficult the camera makes navigating the levels.
      I don't imagine this conveys the experience I was hoping for if you don't know where you're going. I considered fixing
      in an update, but it doesn't really seem in the spirit of the compo. May revisit once the compo is over, if you have any suggestions
      to improve the camera please include in your review.
      <li><strong>MAKING A LEVEL FROM A PNG</strong></li>
      One of the strategies I used as a time save here was to make a method in the Game Manager script that reads the color
      of pixels in a png to create the level; At this point all I had to do was draw out the images in paint and read out
      the colors to generate the level. EZ. Here are some of the source images.<br>
      <img src="/res/img/seaLVL3.png" alt="Sea Level 3">
      <img src="/res/img/seaLVL5.png" alt="Sea Level 5">
      <img src="/res/img/spaceL2.png" alt="Space Level 2">
      <br>
      The Code is as follows:
      <code><br>
        float layerZ = 0;<br>
        foreach(Sprite s in level){<em style="color:chartreuse">//Serialized list of sprites, next time I'll likely use one large sprite and calculate which portions to use</em><br>
            layerZ++;<em style="color:chartreuse">//Only used 5 layers, but didn't know if I wanted to add more depth</em><br>
            levelColors=s.texture.GetPixels32();<em style="color:chartreuse">//STORES THE SPRITE AS AN ARRAY OF PIXELS</em><br>
            for(int y = 0; y&lt;s.rect.height; y++){<br>
                for(int x = 0; x&lt;s.rect.width; x++){<br>
                Color32 c = levelColors[(int)(x+y*s.rect.width)];<br>
                Vector3 pos = new Vector3(x*2,y*2,layerZ*2);<em style="color:chartreuse">//THE TERRAIN BLOCKS WERE ALL 2m<sup>3</sup></em><br>
                <br>
                <em style="color:chartreuse">//REALIZING NOW THIS WOULD HAVE BEEN MORE EFFICIENT AS A SWITCH STATEMENT</em><br>
                    if(CompareColor(c,black)){<br>
                        GameObject go = Instantiate(blockPrefab,pos,Quaternion.identity);<br>
                        <em style = "color:chartreuse">//Block Prefab if the pixel is black</em><br>
                    }<br>
                    else if(CompareColor(c,gray4)){<br>
                        GameObject go = Instantiate(platPrefab,pos,Quaternion.identity);<br>
                        <em style = "color:chartreuse">//Vine Prefab</em><br>
                    } else if(CompareColor(c,cyan)){<br>
                        GameObject go = Instantiate(guardPrefab,pos,Quaternion.identity);<br>
                        <em style = "color:chartreuse">//This was a transparent block to keep the enemies on their platforms</em><br>
                    }<br>
                    else if(CompareColor(c,yellow)){<br>
                        GameObject go = Instantiate(coinPrefab,pos,Quaternion.identity);<br>
                        <em style = "color:chartreuse">//Coins</em><br>
                    } <br>
                    else if (CompareColor(c, red)) {<br>
                        GameObject go = Instantiate(enemyPrefab, pos, Quaternion.identity);<br>
                        <em style = "color:chartreuse">//Enemy-namely Gators</em><br>
                    } <br>
                    else if (CompareColor(c, chartreuse)) {<br>
                        GameObject go = Instantiate(sharkPrefab, pos, Quaternion.identity);<br>
                        <em style = "color:chartreuse">//Sharks or meteors on the space lvl</em><br>
                    ...<br>
      </code>
      Thanks to this technique I was able to do way more levels than I anticipated: didn't get to all of them<br>
      I had planned on a Dream level called Deep Sleep, and a Depths of Hell final level. But I would have had to do
      props and music for those and there was no way I'd have time for all that.<br>

      <li><strong>REUSING AND REPURPOSING ASSETS</strong></li>
      <img src="/res/img/LD48.jpg" alt="3D Print Low Poly Skull"><img src="/res/img/LD48 Progress 45hr.gif" alt="Final Boss"><br>
      I used the skull model in almost every level, and even as the final boss.<br>
      Used the same platform and vine block on every level recolored and resized.
      Repurposed the vines that I had made on the first level to be stalactites, kelp, and arms on the final boss.<br>
      The shark behaviour script was the exact same as the alligator script, with the ability to move on the Y-Axis;
      Come to think of it, I probably could have just used the same script with a bool to check if it could move along the Y.
      The sharks were a bit of an after though though, honestly didn't think I'd make it to that many levels in the 48 hrs.<br>
      The meteors on the space level is the exact same rock on the mine level, with some crater extrusion and the ruby particle system removed.<br>
      Particle effect of the bubbles was flipped and sprite swapped/sped up for the stars on the following level.<br>
      <br>
      Moral of this story is that it can be really fun to try to find lazy ways to add more content to the game with no additional work.
    </ol>
    <br><br>
    <h5>I hope you enjoyed, I'll see you all in October.</h5>
  </p>
    <script>
      var buildUrl = "Build";
      var loaderUrl = buildUrl + "/Depths.loader.js";
      var config = {
        dataUrl: buildUrl + "/Depths.data",
        frameworkUrl: buildUrl + "/Depths.framework.js",
        codeUrl: buildUrl + "/Depths.wasm",
        streamingAssetsUrl: "StreamingAssets",
        companyName: "chancho",
        productName: "The Depths",
        productVersion: "0.048",
      };

      var container = document.querySelector("#unity-container");
      var canvas = document.querySelector("#unity-canvas");
      var loadingBar = document.querySelector("#unity-loading-bar");
      var progressBarFull = document.querySelector("#unity-progress-bar-full");
      var fullscreenButton = document.querySelector("#unity-fullscreen-button");
      var mobileWarning = document.querySelector("#unity-mobile-warning");

      if (/iPhone|iPad|iPod|Android/i.test(navigator.userAgent)) {
        container.className = "unity-mobile";
        config.devicePixelRatio = 1;
        mobileWarning.style.display = "block";
        setTimeout(() => {
          mobileWarning.style.display = "none";
        }, 5000);
      } else {
        canvas.style.width = "100%";
        canvas.style.height = "85%";
      }
      loadingBar.style.display = "block";

      var script = document.createElement("script");
      script.src = loaderUrl;
      script.onload = () => {
        createUnityInstance(canvas, config, (progress) => {
          progressBarFull.style.width = 100 * progress + "%";
        }).then((unityInstance) => {
          loadingBar.style.display = "none";
          fullscreenButton.onclick = () => {
            unityInstance.SetFullscreen(1);
          };
        }).catch((message) => {
          alert(message);
        });
      };
      document.body.appendChild(script);
    </script>
</section>









---index
<section class="text">
<h3>Updates</h3>
<p>
Welcome to the new & improved Chancho.dev 3.0<br>
Complete with a fresh coat of paint!!<br>
<br>
I've setup a server to host the site locally to allow for POST requests.<br>
This will allow me to create leader boards, and other PHP functionality.<br>
Excited to add new features and pages<br>
<br>
I've also created a new C++ program that writes the HTML for me.<br>
Making it far easier to frequently add new content. So stay tuned.<br>
Check it out over on <a href="https://github.com/sbacon-/chancho"> gitHub </a>.<br>
On a semi-related note, the minecraft server is back: <em>mc.chancho.dev</em><br>
<br>
06/20/22<br>
Getting back from vacation, considering refactoring the gdChess Trainer to better utilize UCI<br>
06/08/22<br>
Just completed some consulting work for peer reviewing macros in excel<br>
Email me your sheets if you'd like to join the queue.<br>
</p></section>

<section class="hScroll">
<ul id="library"></ul>
<script src="/res/scripts/genLib.js" async></script></section>









---godot/SquashTheCreeps/index
<section class="feature">
<canvas id="canvas"></canvas>
<script src=index.js></script>
<button id="play" onclick="engine.startGame({onProgress: printProgress })"><i class="fas fa-play"></i></button>
<script>

var engine = new Engine({"args":[],"canvasResizePolicy":2,"executable":"index","experimentalVK":false,"fileSizes":{"index.pck":1885312,"index.wasm":17503191},"focusCanvas":true,"gdnativeLibs":[]});
var playButton = document.querySelector("#play");     
function printProgress(current, total) {
var percentage = (current/total)*100;
playButton.setAttribute("style","background:linear-gradient(45deg,var(--primary-dsat) 0%,var(--primary)"+percentage+"%, var(--complementary) "+percentage+"%,var(--complementary) 100%)"); 
console.log("Loaded " + current + " of " + total + " bytes");
}

</script>
</section>
<section class="text">
<h3>SquashTheCreeps</h3>
<p>
TODO: PROJECT WRITE-UP
</p>
</section>








---misc/Calculator
<section class="feature">
 <h3>Javascript Calculator</h3>
      <div id="calculator">
        <div class="calc-display calc-row">0</div>
        <div class="calc-row">
          <button class="calc-button calc-wide" onclick="clearContent()">CE</button>
          <button class="calc-button" onclick="backspace()">←</button>
          <button class="calc-button" onclick="flushToMemory(`divide`)">÷</button></div>
        <div class="calc-row">
          <button class="calc-button" onclick="appendContent(`7`)">7</button>
          <button class="calc-button" onclick="appendContent(`8`)">8</button>
          <button class="calc-button" onclick="appendContent(`9`)">9</button>
          <button class="calc-button" onclick="flushToMemory(`multiply`)">x</button></div>
        <div class="calc-row">
          <button class="calc-button" onclick="appendContent(`4`)">4</button>
          <button class="calc-button" onclick="appendContent(`5`)">5</button>
          <button class="calc-button" onclick="appendContent(`6`)">6</button>
          <button class="calc-button" onclick="flushToMemory(`subtract`)">-</button></div>
        <div class="calc-row">
          <button class="calc-button" onclick="appendContent(`1`)">1</button>
          <button class="calc-button" onclick="appendContent(`2`)">2</button>
          <button class="calc-button" onclick="appendContent(`3`)">3</button>
          <button class="calc-button" onclick="flushToMemory(`add`)">+</button></div>
        <div class="calc-row">
          <button class="calc-button calc-wide" onclick="appendContent(`0`)">0</button>
          <button class="calc-button" onclick="appendContent(`.`)">.</button>
          <button class="calc-button" onclick="calculate()">=</button>
        </div>
      </div>
      <script type="text/javascript" src="/res/scripts/calc.js"></script>
</section>
<section class="text">
      <p> Made this as part of a <a href="https://frontendmasters.com/courses/web-development-v2"/>course in web-dev</a></p>
      <p> Also made an automation tool for <a href="/misc/NumToWord.html"/>currency to word conversion</a></p>
      <h3>calc.js</h3>
      <pre>
console.log("|--- Hello! ---|")
let memory = 0;
let task = "na"
let newNumber = true;
let display = document.querySelectorAll(".calc-display.calc-row");

function clearContent(){
    display[0].innerHTML="0";
};

function appendContent(number){
    if((number!=='.'&&display[0].innerHTML==0)||newNumber) display[0].innerHTML="";
    display[0].innerHTML+=number;
    newNumber=false;
}

function flushToMemory(request){
    memory = parseFloat(display[0].innerHTML);
    task=request;
    newNumber=true;
}

function calculate(){
    let active = parseFloat(display[0].innerHTML);
    switch(task){
        case `add`:
            display[0].innerHTML= memory+active;
            break;
        case `subtract`:
            display[0].innerHTML= memory-active;
            break;
        case `multiply`:
            display[0].innerHTML= memory*active;
            break;
        case `divide`:
            display[0].innerHTML= memory/active;
            break;
        default:
            display[0].innerHTML="Error: CE";
            task='na';
            break;
    }
    newNumber=true;
}

function backspace(){
    display[0].innerHTML=display[0].innerHTML.substr(0,display[0].innerHTML.length-1);
}

      </pre>
</section>









---misc/Digitizer
<section class="full">
    <h3>Digitizer</h3><br>
    <h4>Downloads:</h4>
    <ul>
      <li><a href="https://github.com/sbacon-/Digitizer">Source Code</a></li>
      <li><a href="https://developer.android.com/studio/command-line/adb">Android Debug Bridge</a></li>
    </ul>
    <p>
        
        <br>
        This is a tool I created to turn an old phone into a drawing tablet.<br>
        The current functionality only allows for stylus input<br>
        Haven't made an app in a while so it's pretty bare bones<br>
        Currently Requires the Android Debug Bridge and you need to alter<br>
        the PC client source code to the proper directory<br>
        <strong>Update: 08/09/21</strong><br>
        I bought a Wacom tablet... It was like 20 USD
    </p>
</section>









---misc/NumToWord
<section class="full">
       <h5>Numbers to Word Calculator</h5>
        <p>Enter a number to convert to dollars and cents. Click to Copy!<br>
        </p>

        <div class="num-cash">
            <input type="number" class="num-cash-input" placeholder="0000000.00"></input>
            <a class="num-result">
              <h4 class="num-cash-output" onclick="clickToCopy()"></h4>&nbsp
              <i class="fas fa-clipboard" onclick="clickToCopy()"></i>
            </a>
            <script type="text/javascript" src="/res/scripts/numCash.js"></script>
        </div>

        <p>
          Works with numbers up to one decicentillion [10<sup>333</sup>].<br>
          <a href="https://github.com/sbacon-/chancho/blob/master/res/scripts/numCash.js">
            SourceCode</a> - (or just hit F12)
        </p>
</section>








---misc/BTC
<section class="full">
<h3>Bitcoin Exchange Rate</h3><br>
    <h4>Downloads:</h4>
    <ul>
      <li><a href="/res/files/BTC.jar">BTC.jar</a></li>
    </ul><br>
    <p>
      <strong>Note: This project is no longer being maintained and did not function last I checked</strong><br>
      This is a simple utility to fetch the current exchange rate of Bitcoin<br>
      Can be run in a terminal using java -jar /path/to/BTC.jar<br>
      All source code can be found here: <a href="https://github.com/sbacon-/BTC">source</a><br>
    </p>
</section>









---misc/index
<section class="full">
<h2>Archives</h2>
    <pre>
        <a href="/misc/Alfonso.html">Alfonso</a>
        <a href="/misc/Blender.html">Blender</a>
        <a href="/misc/BTC.html">BitCoin Fetch</a>
        <a href="/misc/ClickBot.html">Click Bot</a>
        <a href="/misc/Digitizer.html">Digitizer</a>
        <a href="/misc/imgdump/">/wg/ ImageDump</a>
        <a href="/misc/LD45.html">LudumDare 45</a>
        <a href="/misc/LD46.html">LudumDare 46</a>
        <a href="/cSharp/LD47">LudumDare 47</a>
    </pre>
</section>









---cSharp/HotelLazarus/index
<section class="feature">

<div class="center">
<div id="unity-container" class="unity-desktop">
<canvas id="unity-canvas"></canvas>
<div id="unity-loading-bar">
<div id="unity-logo"></div>
<div id="unity-progress-bar-empty">
<div id="unity-progress-bar-full"></div>
</div>
</div>
<div id="unity-mobile-warning"></div>
<div id="unity-footer">
<div id="unity-webgl-logo"></div>
<div id="unity-fullscreen-button"></div>
<div id="unity-build-title"></div>
</div>
</div>
</div>
</section>
<section class="text">
<br>
<p>

<br>
<h2>Hotel Lazarus</h2>
<h3>Hospitality for the recently departed</h3>
Decided to try my hand at a tower building sim.
I've been considering making this type of game for a while.
Luckily, I was able to shoehorn the genre with the LD<i>L</i> theme.
<br><br>
<a href = "/res/img/ld50_prep.png"><img src="/res/img/ld50_prep.png" alt="Hastily scribbled Game Ideas from the Final Round"><br></a>

<h4> Taking Lessons From Past Mistakes </h4>
I didn't prepare as much as I typically do for the Compo. (Only one practice project the week before <a href="/cSharp/Wordle/index.html"> Wordle Clone </a>).
Before LD49, I spent weeks trying to learn C# best practices, Blender modeling techniques, and learning a new MIDI/Audio Sequencer (muse4).
By the time the compo started I was unable to focus on what was really important:
<br><br>

<h4>Making the Project 'I' Wanted to Make</h4>
<a href = "/res/img/ld50_wb.png"><img src="/res/img/ld50_wb.png" alt="Whiteboard with themes: Tax Evasion, Sinking Ship, etc."></a><br>
Taking a more relaxed aproach this time, I made my list once the final round of voting started.
Once the theme was announced - I wrote more ideas on the whiteboard to make a decision.
The theme was so broad this time that I figured any game with a fail state could be a candidate.
So I went with an idea that I've had since my career change into the hospitality industry.
<br><br>

<a href="/res/img/ld50_prog1.gif"><img src="/res/img/ld50_prog1.gif" alt="Prototype with building and Guest AI"><br></a>
Armed with enough chips, candy, and caffeine to feed a small village, I got to work;
and after a few hours I had the basic structure finished.
The guests looked a bit like a skeletons already, so with some slight adjustments a tone was established.
<br><br>

<h4>Lessons Learned</h4><br>
<a href="/res/img/ld50_notes.png"><img src="/res/img/ld50_notes.png"><br></a>
One of the biggest things that helped was PLAY-TESTING. In previous years, I've received tons of feedback
on the controls in the game. I enlisted the help of my sister to try out the game before publishing.
There were a ton of things I didn't consider: <br>
<i>What will they do if they skip the control menu?<br>
What if they are playing with only a mouse?<br>
Why does nothing happen when you click the around the lobby (*wink)?<br> </i>
These questions never would have crossed my mind otherwise. Thanks Kass!
<br><br>

Overall, very happy with how this one turned out. Hope you enjoyed as much as I have, look out for a mobile release (coming soon... maybe)<br>
See y'all in October
<br><br>

<h4>Created in 48 hours for Ludum Dare #50</h4>
</p>
<script>
      var buildUrl = "Build";
      var loaderUrl = buildUrl + "/LD50-PostJam.loader.js";
      var config = {
        dataUrl: buildUrl + "/LD50-PostJam.data",
        frameworkUrl: buildUrl + "/LD50-PostJam.framework.js",
        codeUrl: buildUrl + "/LD50-PostJam.wasm",
        streamingAssetsUrl: "StreamingAssets",
        companyName: "chancho",
        productName: "LD50",
        productVersion: "1.0",
      };

      var container = document.querySelector("#unity-container");
      var canvas = document.querySelector("#unity-canvas");
      var loadingBar = document.querySelector("#unity-loading-bar");
      var progressBarFull = document.querySelector("#unity-progress-bar-full");
      var fullscreenButton = document.querySelector("#unity-fullscreen-button");
      var mobileWarning = document.querySelector("#unity-mobile-warning");

      if (/iPhone|iPad|iPod|Android/i.test(navigator.userAgent)) {
        container.className = "unity-mobile";
        config.devicePixelRatio = 1;
        mobileWarning.style.display = "block";
        setTimeout(() => {
          mobileWarning.style.display = "none";
        }, 5000);
      } else {
        canvas.style.width = "100%";
        canvas.style.height = "85%";
      }
      loadingBar.style.display = "block";

      var script = document.createElement("script");
      script.src = loaderUrl;
      script.onload = () => {
        createUnityInstance(canvas, config, (progress) => {
          progressBarFull.style.width = 100 * progress + "%";
        }).then((unityInstance) => {
          loadingBar.style.display = "none";
          fullscreenButton.onclick = () => {
            unityInstance.SetFullscreen(1);
          };
        }).catch((message) => {
          alert(message);
        });
      };
      document.body.appendChild(script);
    </script>
</section>









---misc/Alfonso
<section class="full">
    <h3>Alfonso's Ice Cream Shop</h3>
    <br>
    <h4>Downloads:</h4>
    <ul>
      <li><a href="/res/files/Alfonso.jar">Alfonso.jar</a></li>
    </ul>
    <br>
    <p>
        This project was a game I made to teach programming to my little bro.<br>
        It is the greatest work I've ever not completed... <br>
        Were I a composer, this game would be my magnum opus.<br>
        <br>
        Here is what critics have said about Alfonso's Ice Cream Shop:<br>
            <q>They already have that</q><br>
            <q>This game trash</q><br>
            <q>I thought I told you don't come back here</q><br>
        <br>
        Truly a masterpiece. I love this project and hope to maybe add some <br>
        coherent game structure... maybe <br>
    </p>
</section>









---cSharp/Catan/index
<section class="feature">
      <div class="center">
      <div class="webgl-content">
        <div id="unityContainer" style="width: 100%; height:85%"></div>
        <div class="footer">
          <div class="webgl-logo"></div>
          <div class="fullscreen" onclick="unityInstance.SetFullscreen(1)"></div>
          <div class="title">CATAN</div>
        </div>
      </div>
      </div>
</section>
<section class"text">
    <h3>CATAN (UNITY)</h3>
      <p>
        This is a <del>better</del>(different) version of the Java remake of Settlers of Catan.
        It was more an excercise in 3d modeling and programatic placement and rotation in Unity.<br>
        <em>A / D -> Rotate Camera</em><br>
        <em>Shift -> Get Dizzy </em><br>
      </p>

      <h3>CATAN (Pre-Alpha)</h3><br>
      <h4>Downloads:</h4>
      <ul>
        <li><a href="/res/files/Catan.jar">Catan.jar a0.1.1</a></li>
      </ul><br>
          <p>
          This is my current pet project, it is a recreation of my favorite boardgame Settlers of Catan<br>
          Latest update 11/19 includes new development card toasts to show built cards, and a few more cosmetic updates.<br>
          There is still much to accomplish for this project, but so far it has been good practice in implementing Toasts & Buttons<br>
          All source code can be found here: <a href="https://github.com/sbacon-/Catan.git">source</a><br>
          <strong>Screenshots:</strong><br>
          <img src="/res/img/Catan_1.png">
          <img src="/res/img/Catan_2.png">
          <img src="/res/img/Catan_3.png"><br>

          <strong>TODO:</strong><br>
          Finishing Toasts<br>
          Add EndGame<br>
          Trade<br>
          Online<br>

      </p>
</section>









---misc/Blender
<section class="full">
<h2>Blends</h2>
        <p>
		<img class="gallery" src="/res/img/blend/chess.png"><br>
		<a href="/res/img/blend/chessWall.png"> High Def Wallpaper - fixed the rooks clipping into the board </a>
		<img class="gallery" src="/res/img/blend/skeleton.png"><br>
		<img class="gallery" src="/res/img/blend/skeletonRef.png"><br>
		<img class="gallery" src="/res/img/blend/shelf.png"><br>
		<img class="gallery" src="/res/img/blend/shelfRef.png"><br>
		<img class="gallery" src="/res/img/blend/office.png"><br>
		<img class="gallery" src="/res/img/blend/magic.png"><br>
		<video class="gallery" controls="controls" width="800" height="600" name="Video Name">
 			<source src="/res/img/blend/donut.mov">
		</video>
		<video class="gallery" controls="controls" width="800" height="600" name="Video Name">
 			<source src="/res/img/blend/run.mov">
		</video>
        </p>
</section>









---misc/LD45
<section class="full">
<h3>Ludum Dare 45 (NOUGHT)</h3><br>
    <h4>Downloads:</h4>
    <ul>
      <li><a href="/res/files/Nought.jar">Nought.jar (LD JAM)</a></li>
      <li><a href="/res/files/LD45.jar">LD45.jar (LD COMPO)</a></li>
    </ul><br>
    <p>
        Game was created in 48 hours for the <a href="https://ldjam.com/events/ludum-dare/45/nought-procedurally-generated-dungeon">Ludum Dare #45</a><br>
        Theme: "Start With Nothing"<br>
        All source code can be found here: <a href="https://github.com/sbacon-/LDJam45.git">source</a><br>
        <br>
        <strong>Screenshots:</strong><br>
        <img src="/res/img/72hr_2.png">
        <img src="/res/img/72hr_1.png">
        <img src="/res/img/72hr_3.png"><br>


        <strong>Results:</strong><br>
        Overall: 344th (3.197 average from 40 ratings)<br>
        Fun: 288th (3.158 average from 40 ratings)<br>
        Innovation: 453rd (2.474 average from 40 ratings)<br>
        Theme: 447th (2.689 average from 39 ratings)<br>
        Graphics: 363rd (2.934 average from 40 ratings)<br>
        Mood: 376th (2.848 average from 35 ratings)<br>
    </p>
</section>









---godot/AvoidTheCreeps/index
<section class="feature">
<canvas id="canvas"></canvas>
<script src=index.js></script>
<button id="play" onclick="engine.startGame({onProgress: printProgress })"><i class="fas fa-play"></i></button>
<script>

var engine = new Engine({"args":[],"canvasResizePolicy":2,"executable":"index","experimentalVK":false,"fileSizes":{"index.pck":2172608,"index.wasm":17503191},"focusCanvas":true,"gdnativeLibs":[]});
var playButton = document.querySelector("#play");     
function printProgress(current, total) {
var percentage = (current/total)*100;
playButton.setAttribute("style","background:linear-gradient(45deg,var(--primary-dsat) 0%,var(--primary)"+percentage+"%, var(--complementary) "+percentage+"%,var(--complementary) 100%)"); 
console.log("Loaded " + current + " of " + total + " bytes");
}

</script>
</section>
<section class="text">
<h3>Test</h3>
<p>
TODO: PROJECT WRITE-UP
</p>
</section>








