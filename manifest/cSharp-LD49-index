<section class="feature">
  <div class="center">
    <div id="unity-container" class="unity-desktop">
      <canvas id="unity-canvas"></canvas>
      <div id="unity-loading-bar">
        <div id="unity-logo"></div>
        <div id="unity-progress-bar-empty">
          <div id="unity-progress-bar-full"></div>
        </div>
      </div>
      <div id="unity-mobile-warning"></div>
      <div id="unity-footer">
        <div id="unity-webgl-logo"></div>
        <div id="unity-fullscreen-button"></div>
        <div id="unity-build-title"></div>
      </div>
    </div>
  </div>
</section>
<section class="text">
  <h2>Un-Named Stock Market Battle Simulator</h2>
  
  <h4>Created in 48 hours for Ludum Dare #49</h4><br>
  <h3>Lesson's Learned</h3>
  <p>
  This project didn't turn out exactly like I'd hoped.<br>
  Not sure, but I think I had too many plans for mechanics to implement. After the first 12 hours of the Compo,
  I was already exhausted from trying to pull a coffee fueled 24 hour run. Ofcourse to the the detriment of the next few days. The scope was way beyond
  what I could realistically accomplish.<br>
  </p>
  <br><h4>Here are the ideas I would have ignored if another theme was selected</h4><br>
  <a href = "/res/img/ld49prep.png"><img src="/res/img/ld49prep.png" alt="16x2 first impressions, scribbled out in gimp"></a>
  <p>
  The main issue I think is the game just isn't fun, (I'd opt out of that category on voting if I could lol). I couldn't really implement
  any incentive to trade other than to see the numbers go up. If that works it works, but with as little polish as I could put together in the time
  I don't think it does. I wanted to implement some sort of system to upgrade the hardware and enviroment, but I guess I couldn't be bothered.
  </p>
  <br><h4>On a more positive note...</h4><br>
  <p>
  I knew going into the compo that I wanted to implement a renderTexture of some sort. As a filter to the entire game or in the case of this game:
  as a second UI projected onto a computer screen. The vectors on the graph were a bit tricky, they kept disappearing when I was down scaling the texture
  to give it a more blocky look on the monitor, but one of my absolute favorite parts of development is the UI (as you can maybe tell from the game above that is about 90% UI),
  so I had a great time with it.
  </p><br>
  <h5>I hope you enjoyed, I'll see you all in April.</h5>
  <script>
      var buildUrl = "Build";
      var loaderUrl = buildUrl + "/LD49.loader.js";
      var config = {
        dataUrl: buildUrl + "/LD49.data",
        frameworkUrl: buildUrl + "/LD49.framework.js",
        codeUrl: buildUrl + "/LD49.wasm",
        streamingAssetsUrl: "StreamingAssets",
        companyName: "chancho",
        productName: "LD49",
        productVersion: "0.049",
      };

      var container = document.querySelector("#unity-container");
      var canvas = document.querySelector("#unity-canvas");
      var loadingBar = document.querySelector("#unity-loading-bar");
      var progressBarFull = document.querySelector("#unity-progress-bar-full");
      var fullscreenButton = document.querySelector("#unity-fullscreen-button");
      var mobileWarning = document.querySelector("#unity-mobile-warning");

      if (/iPhone|iPad|iPod|Android/i.test(navigator.userAgent)) {
        container.className = "unity-mobile";
        config.devicePixelRatio = 1;
        mobileWarning.style.display = "block";
        setTimeout(() => {
          mobileWarning.style.display = "none";
        }, 5000);
      } else {
        canvas.style.width = "100%";
        canvas.style.height = "85%";
      }
      loadingBar.style.display = "block";

      var script = document.createElement("script");
      script.src = loaderUrl;
      script.onload = () => {
        createUnityInstance(canvas, config, (progress) => {
          progressBarFull.style.width = 100 * progress + "%";
        }).then((unityInstance) => {
          loadingBar.style.display = "none";
          fullscreenButton.onclick = () => {
            unityInstance.SetFullscreen(1);
          };
        }).catch((message) => {
          alert(message);
        });
      };
      document.body.appendChild(script);
    </script>
</section>





